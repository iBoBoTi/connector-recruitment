// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/connector.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SlackConnectorServiceClient is the client API for SlackConnectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SlackConnectorServiceClient interface {
	// Creates a new Slack connector.
	CreateConnector(ctx context.Context, in *CreateConnectorRequest, opts ...grpc.CallOption) (*CreateConnectorResponse, error)
	// Retrieves an existing Slack connector by ID.
	GetConnector(ctx context.Context, in *GetConnectorRequest, opts ...grpc.CallOption) (*GetConnectorResponse, error)
	// Deletes a Slack connector by ID.
	DeleteConnector(ctx context.Context, in *DeleteConnectorRequest, opts ...grpc.CallOption) (*DeleteConnectorResponse, error)
}

type slackConnectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSlackConnectorServiceClient(cc grpc.ClientConnInterface) SlackConnectorServiceClient {
	return &slackConnectorServiceClient{cc}
}

func (c *slackConnectorServiceClient) CreateConnector(ctx context.Context, in *CreateConnectorRequest, opts ...grpc.CallOption) (*CreateConnectorResponse, error) {
	out := new(CreateConnectorResponse)
	err := c.cc.Invoke(ctx, "/connector.v1.SlackConnectorService/CreateConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slackConnectorServiceClient) GetConnector(ctx context.Context, in *GetConnectorRequest, opts ...grpc.CallOption) (*GetConnectorResponse, error) {
	out := new(GetConnectorResponse)
	err := c.cc.Invoke(ctx, "/connector.v1.SlackConnectorService/GetConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slackConnectorServiceClient) DeleteConnector(ctx context.Context, in *DeleteConnectorRequest, opts ...grpc.CallOption) (*DeleteConnectorResponse, error) {
	out := new(DeleteConnectorResponse)
	err := c.cc.Invoke(ctx, "/connector.v1.SlackConnectorService/DeleteConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlackConnectorServiceServer is the server API for SlackConnectorService service.
// All implementations should embed UnimplementedSlackConnectorServiceServer
// for forward compatibility
type SlackConnectorServiceServer interface {
	// Creates a new Slack connector.
	CreateConnector(context.Context, *CreateConnectorRequest) (*CreateConnectorResponse, error)
	// Retrieves an existing Slack connector by ID.
	GetConnector(context.Context, *GetConnectorRequest) (*GetConnectorResponse, error)
	// Deletes a Slack connector by ID.
	DeleteConnector(context.Context, *DeleteConnectorRequest) (*DeleteConnectorResponse, error)
}

// UnimplementedSlackConnectorServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSlackConnectorServiceServer struct {
}

func (UnimplementedSlackConnectorServiceServer) CreateConnector(context.Context, *CreateConnectorRequest) (*CreateConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnector not implemented")
}
func (UnimplementedSlackConnectorServiceServer) GetConnector(context.Context, *GetConnectorRequest) (*GetConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnector not implemented")
}
func (UnimplementedSlackConnectorServiceServer) DeleteConnector(context.Context, *DeleteConnectorRequest) (*DeleteConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnector not implemented")
}

// UnsafeSlackConnectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SlackConnectorServiceServer will
// result in compilation errors.
type UnsafeSlackConnectorServiceServer interface {
	mustEmbedUnimplementedSlackConnectorServiceServer()
}

func RegisterSlackConnectorServiceServer(s grpc.ServiceRegistrar, srv SlackConnectorServiceServer) {
	s.RegisterService(&SlackConnectorService_ServiceDesc, srv)
}

func _SlackConnectorService_CreateConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackConnectorServiceServer).CreateConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connector.v1.SlackConnectorService/CreateConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackConnectorServiceServer).CreateConnector(ctx, req.(*CreateConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlackConnectorService_GetConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackConnectorServiceServer).GetConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connector.v1.SlackConnectorService/GetConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackConnectorServiceServer).GetConnector(ctx, req.(*GetConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlackConnectorService_DeleteConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlackConnectorServiceServer).DeleteConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connector.v1.SlackConnectorService/DeleteConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlackConnectorServiceServer).DeleteConnector(ctx, req.(*DeleteConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SlackConnectorService_ServiceDesc is the grpc.ServiceDesc for SlackConnectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SlackConnectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "connector.v1.SlackConnectorService",
	HandlerType: (*SlackConnectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConnector",
			Handler:    _SlackConnectorService_CreateConnector_Handler,
		},
		{
			MethodName: "GetConnector",
			Handler:    _SlackConnectorService_GetConnector_Handler,
		},
		{
			MethodName: "DeleteConnector",
			Handler:    _SlackConnectorService_DeleteConnector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/connector.proto",
}
